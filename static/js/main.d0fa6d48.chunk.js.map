{"version":3,"sources":["containers/gallery/gallery.store.js","containers/gallery/Picture.jsx","containers/gallery/Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["GalleryStore","isGrayMode","images","currentImages","countGalleryImages","url","fetch","response","json","this","map","image","key","Math","random","setRandomImages","index","num","arguments","length","undefined","entriesNumber","min","indexes","i","floor","includes","push","decorate","observable","toggleGrayMode","action","Picture","_ref","picture","className","isGreyMode","concat","id","react_default","a","createElement","index_es","src","author","Gallery","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","filter","handelChangeGreyMode","galleryStore","handleFilter","e","target","value","fetchImages","_this2","gallery_Picture","label","onChange","margin","fullWidth","variant","FormControlLabel_default","control","checked","color","onClick","_this3","toLowerCase","indexOf","Component","computed","inject","observer","stores","App","index_module","gallery_Gallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAEMA,mDAEFC,YAAa,OACbC,OAAS,QACTC,cAAgB,QAChBC,mBAAqB,gMAEHC,iCAAM,sCACGC,MAAMD,iBAAvBE,kBACcA,EAASC,cAA7BC,KAAKP,cACLO,KAAKP,OAAOQ,IAAI,SAAAC,GAEZ,OADAA,EAAMC,IAAMC,KAAKC,SACVH,IAEXF,KAAKM,8JASL,IAN2C,IAIvCC,EAJQC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBT,KAAKL,mBACjBiB,EAAgBR,KAAKS,IAAIL,EAAKR,KAAKP,OAAOiB,QAC1CI,EAAU,GACVrB,EAAS,GAGNsB,EAAI,EAAGA,EAAIH,EAAeG,IAAK,CAEpC,GACIR,EAAQH,KAAKY,MAAMZ,KAAKC,SAAWL,KAAKP,OAAOiB,cAC1CI,EAAQG,SAASV,IAE1BO,EAAQI,KAAKX,GACbd,EAAOyB,KAAKlB,KAAKP,OAAOc,IAE5BP,KAAKN,cAAgBD,2CAIrBO,KAAKR,YAAcQ,KAAKR,oBAKhC2B,YACI5B,EAAc,CACVE,OAAQ2B,IACR1B,cAAe0B,IACf5B,WAAY4B,IACZC,eAAgBC,IAChBhB,gBAAiBgB,MAIV/B,wBCnCAgC,EAfC,SAAAC,GAA2B,IAAzBC,EAAyBD,EAAzBC,QAERC,EAFiCF,EAAhBG,WAEQ,eAAiB,UAC1C/B,EAAG,uCAAAgC,OAA0CH,EAAQI,IAE3D,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMP,UAAWA,GACbI,EAAAC,EAAAC,cAAA,OAAKE,IAAKtC,IACVkC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKN,UAAU,eAAeD,EAAQU,4BCHhDC,sBAIF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvC,KAAAoC,IACfE,EAAAC,OAAAE,EAAA,EAAAF,CAAAvC,KAAAuC,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAA3C,KAAMqC,KAHVO,OAAS,GAEUN,EAQnBO,qBAAuB,WACnBP,EAAKD,MAAMS,aAAazB,kBATTiB,EAYnBS,aAAe,SAACC,GACZV,EAAKM,OAASI,EAAEC,OAAOC,OAbRZ,EAwBnBhC,gBAAkB,WACdgC,EAAKD,MAAMS,aAAaxC,mBAzBTgC,mFAKftC,KAAKqC,MAAMS,aAAaK,+CAuBnB,IAAAC,EAAApD,KAECP,EAASO,KAAKP,OAAOQ,IAAI,SAAAC,GAAK,OAChC4B,EAAAC,EAAAC,cAACqB,EAAD,CAASlD,IAAKD,EAAMC,IACXsB,QAASvB,EACTyB,WAAYyB,EAAKf,MAAMS,aAAatD,eAEjD,OACIsC,EAAAC,EAAAC,cAAA,OAAKN,UAAU,WACXI,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIJ,GAAG,gBACHyB,MAAM,SACNC,SAAUvD,KAAK+C,aACfS,OAAO,SACPC,WAAS,EACTC,QAAQ,aAGZ5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAkB6B,QAAS9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACvB4B,QAAS7D,KAAKqC,MAAMS,aAAatD,WACjC+D,SAAUvD,KAAK6C,qBACfK,MAAM,gBACNI,MAAM,gBAEVxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQyB,QAAQ,YAAYhC,UAAW,mBAAoBoC,MAAM,UAAUC,QAAS/D,KAAKM,iBAAzF,gBAMRwB,EAAAC,EAAAC,cAAA,WAASN,UAAU,UACdjC,EAAOiB,OAASjB,EAAS,mDA7C7B,IAAAuE,EAAAhE,KACT,MAAoB,KAAhBA,KAAK4C,OACE5C,KAAKqC,MAAMS,aAAapD,cAG5BM,KAAKqC,MAAMS,aAAapD,cAAckD,OAAO,SAAA1C,GAAK,OAAIA,EAAMiC,OAAO8B,cAAcC,QAAQF,EAAKpB,OAAOqB,gBAAkB,WAzBhHE,cA0EtBhD,YAASiB,EAAS,CACd3C,OAAQ2E,IACRxB,OAAQxB,IACR2B,aAAczB,MAGH+C,kBAAO,eAAPA,CAAuBC,YAASlC,ICnFzCmC,EAAS,CACXzB,aAAc,IAAIvD,GAaPiF,mLARP,OACI1C,EAAAC,EAAAC,cAACyC,EAAA,EAAaF,EACVzC,EAAAC,EAAAC,cAAC0C,EAAD,cAJEP,aCEEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0fa6d48.chunk.js","sourcesContent":["import {decorate, observable, action} from \"mobx\";\n\nclass GalleryStore {\n\n    isGrayMode = false;\n    images = [];\n    currentImages = [];\n    countGalleryImages = 30;\n\n    async fetchImages(url = 'https://picsum.photos/list') {\n        const response = await fetch(url);\n        this.images = await response.json();\n        this.images.map(image => {\n            image.key = Math.random();\n            return image;\n        });\n        this.setRandomImages();\n    }\n\n    setRandomImages(num = this.countGalleryImages) {\n        const entriesNumber = Math.min(num, this.images.length);\n        const indexes = [];\n        const images = [];\n        let index;\n\n        for (let i = 0; i < entriesNumber; i++) {\n\n            do {\n                index = Math.floor(Math.random() * this.images.length);\n            } while (indexes.includes(index));\n\n            indexes.push(index);\n            images.push(this.images[index]);\n        }\n        this.currentImages = images;\n    }\n\n    toggleGrayMode() {\n        this.isGrayMode = !this.isGrayMode;\n    }\n\n}\n\ndecorate(\n    GalleryStore, {\n        images: observable,\n        currentImages: observable,\n        isGrayMode: observable,\n        toggleGrayMode: action,\n        setRandomImages: action,\n    }\n);\n\nexport default GalleryStore;\n","import React from 'react';\nimport {Card, CardContent} from \"@material-ui/core\";\n\nconst Picture = ({picture, isGreyMode}) => {\n\n    const className = isGreyMode ? 'Picture grey' : 'Picture';\n    const url = `https://picsum.photos/300/300?image=${picture.id}`;\n\n    return (\n        <Card className={className}>\n            <img src={url}/>\n            <CardContent>\n                <div className=\"Author-name\">{picture.author}</div>\n            </CardContent>\n        </Card>\n    )\n};\n\nexport default Picture;\n","import React, {Component} from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport Picture from \"./Picture\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {Checkbox, TextField, Button} from \"@material-ui/core\";\nimport {decorate, observable, action, computed} from \"mobx\";\n\nimport './gallery.scss';\n\nclass Gallery extends Component {\n\n    filter = '';\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.galleryStore.fetchImages();\n    }\n\n    handelChangeGreyMode = () => {\n        this.props.galleryStore.toggleGrayMode();\n    }\n\n    handleFilter = (e) => {\n        this.filter = e.target.value;\n    };\n\n    get images() {\n        if (this.filter === '') {\n            return this.props.galleryStore.currentImages;\n        }\n\n        return this.props.galleryStore.currentImages.filter(image => image.author.toLowerCase().indexOf(this.filter.toLowerCase()) > -1);\n    }\n\n    setRandomImages = () => {\n        this.props.galleryStore.setRandomImages();\n    }\n\n    render() {\n\n        const images = this.images.map(image =>\n            <Picture key={image.key}\n                     picture={image}\n                     isGreyMode={this.props.galleryStore.isGrayMode}/>);\n\n        return (\n            <div className=\"Gallery\">\n                <header>\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Filter\"\n                        onChange={this.handleFilter}\n                        margin=\"normal\"\n                        fullWidth\n                        variant=\"outlined\"\n                    />\n\n                    <FormControlLabel control={<Checkbox\n                        checked={this.props.galleryStore.isGrayMode}\n                        onChange={this.handelChangeGreyMode}\n                        value=\"Grey filter\"\n                    />} label=\"Grey filter\"/>\n\n                    <div>\n                        <Button variant=\"contained\" className={'GetImages-button'} color=\"primary\" onClick={this.setRandomImages}>\n                            Get images\n                        </Button>\n                    </div>\n                </header>\n\n                <section className=\"Images\">\n                    {images.length ? images : 'No result found'}\n                </section>\n\n\n            </div>\n        );\n    }\n}\n\ndecorate(Gallery, {\n    images: computed,\n    filter: observable,\n    handleFilter: action,\n});\n\nexport default inject('galleryStore')(observer(Gallery));\n","import React, {Component} from 'react';\nimport './App.scss';\nimport GalleryStore from \"./containers/gallery/gallery.store\";\nimport {Provider} from \"mobx-react\";\nimport Gallery from \"./containers/gallery/Gallery\";\n\nconst stores = {\n    galleryStore: new GalleryStore()\n};\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider {...stores}>\n                <Gallery/>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}